#version 460

// #define NORMALS
// #define ABSNORMALS
// #define RAYDEPTH_MISS
// #define RAYDEPTH_ALL
#define SHADOWS
#define DIFFUSE_LIGHTING

//ship https://sketchfab.com/3d-models/ship-in-a-bottle-9ddbc5b32da94bafbfdb56e1f6be9a38

layout(local_size_x = 16, local_size_y = 16) in;


struct InnerOctant {
	uint children[8];
};

struct Leaf {
	uint color;	// packed 4x8 rgb color and transparency
	uint normalMetal;  // packed 4x8 normal and metal
};

layout(binding = 0, std430) restrict readonly buffer InnerOctants {
	InnerOctant innerOctants[];
};

layout(binding = 1, std430) restrict readonly buffer Leaves {
	Leaf leaves[];
};


uniform vec2 resolution;

uniform vec3 cameraPos;
uniform mat3 cameraMat;

uniform vec3 sunDir;

layout(rgba8) restrict writeonly uniform image2D texture;


const float MIN_STEP = 0.00001f;

const uint leafBit = 0x80000000, leafData = 0x7FFFFFFF;


float minComponent(in const vec3 v) {
	return min(min(v.x, v.y), v.z);
}

float maxComponent(in const vec3 v) {
	return max(max(v.x, v.y), v.z);
}

uint getVoxel(in const vec3 pos, out vec3 offset, out float side) {
	uint index = 0;

	offset = vec3(0);
	side = .5f;

	while (true) {
		const bvec3 mask = greaterThanEqual(pos, offset + side);
		const int child = int(mask.x) + (int(mask.y) * 2) + (int(mask.z) * 4);

		offset += vec3(mask) * vec3(side);

		// child is leaf
		if (innerOctants[index].children[child] >= leafBit) {
			return (innerOctants[index].children[child] & leafData);
		}

		index = innerOctants[index].children[child];

        side *= 0.5f;
	}
}

bool castRayOpaque(in const vec3 origin, in const vec3 dir, inout vec3 color, inout float hitDist, inout vec3 hit, inout vec3 normal) {
	const vec3 inverseDir = 1.f / dir;
	const vec3 bias = inverseDir * origin;

	const vec3 boundsMin = -bias;
	const vec3 boundsMax = inverseDir - bias;

	const float tMin = max(0, maxComponent(min(boundsMin, boundsMax)));
	const float tMax = 		  minComponent(max(boundsMin, boundsMax));

	if (tMin > tMax)
		return false;

	float t = tMin + MIN_STEP;

	while (t < tMax) {
		const vec3 pos = t * dir + origin;
		vec3 offset;
		float side;
		const uint node = getVoxel(pos, offset, side);

		if(node != 0) {
			hit = origin + ((t - MIN_STEP) * dir);

		#if defined RAYDEPTH_MISS || defined RAYDEPTH_ALL
			hitDist = t - tMin;
		#else
			hitDist = t;
		#endif

			color = unpackUnorm4x8(leaves[node].color).rgb;
			normal = unpackSnorm4x8(leaves[node].normalMetal).rgb;
			return true;
		}

		const vec3 nodeMin = offset * inverseDir - bias;
		const vec3 nodeMax = (offset + side) * inverseDir - bias;

		const float uMin = max(0, maxComponent(min(nodeMin, nodeMax)));
		const float uMax = minComponent(max(nodeMin, nodeMax));

		t += max(uMax - uMin, MIN_STEP);
	}
	
	color = vec3(.15);

	#if defined RAYDEPTH_MISS || defined RAYDEPTH_ALL
		hitDist = t - tMin;
	#else
		hitDist = t;
	#endif

	return false;
}

vec4 castRayTrans(in const vec3 origin, in const vec3 dir, inout bool rayHit, inout float rayDist) {
	const vec3 inverseDir = 1.f / dir;
	const vec3 bias = inverseDir * origin;

	const vec3 boxMin = -bias;
	const vec3 boxMax = inverseDir - bias;

	const float tMin = max(0, maxComponent(min(boxMin, boxMax)));
	const float tMax = minComponent(max(boxMin, boxMax));

	// ray misses root
	if (tMin > tMax)
		return vec4(0);

	vec4 finalColor = vec4(0);

	float t = tMin + MIN_STEP;

	while (t < tMax) {
		const vec3 pos = t * dir + origin;
		vec3 offset;
		float side;
		const uint node = getVoxel(pos, offset, side);

		if (node != 0) {
			const vec4 color = unpackUnorm4x8(leaves[node].color);

			finalColor = finalColor.a * finalColor + (1.f - finalColor.a) * color;

			//if(color.a >= .95f) {
				rayHit = true;
				rayDist = t;

				return finalColor;
			//}
		}

		const vec3 nodeMin = offset * inverseDir - bias;
		const vec3 nodeMax = (offset + side) * inverseDir - bias;

		const float uMin = max(0.f, maxComponent(min(nodeMin, nodeMax)));
		const float uMax = minComponent(max(nodeMin, nodeMax));

		t += max(MIN_STEP, uMax - uMin);
	}

	rayDist = t;
	return vec4(finalColor.xyz + .15f, finalColor.a);
}


void main() {
	const vec3 rayVec = normalize(vec3((vec2(gl_GlobalInvocationID.xy) - (0.5f * resolution))/resolution.y, 1.f)) * cameraMat;

	vec3 color = vec3(0);
	float hitDist = 0;
	vec3 hitPos = vec3(0);
	vec3 normal = vec3(0);

	if (castRayOpaque(cameraPos, rayVec, color, hitDist, hitPos, normal)) {
	#if defined NORMALS
		color = normal;
	#elif defined ABSNORMALS
		color = abs(normal);
	#elif defined RAYDEPTH_ALL
		color = vec3(hitDist);
	#elif defined SHADOWS || defined DIFFUSE_LIGHTING
		vec3 c;
		
		#if defined SHADOWS
		if (castRayOpaque(hitPos, sunDir, c, hitDist, hitPos, normal))
			color *= min(max(.2f, hitDist), .3f);
		#if defined DIFFUSE_LIGHTING
			else
		#endif
		#endif
		#if defined DIFFUSE_LIGHTING
			color *= max(0.3f, 1.2f * dot(normal, sunDir) - .1f);
		#endif
	#endif
		// color = color
    }
	#if defined RAYDEPTH_MISS || defined RAYDEPTH_ALL
		else color = vec3(hitDist);
	#endif
	
	imageStore(texture, ivec2(gl_GlobalInvocationID.xy), vec4(color, 0));
	//imageStore(texture, ivec2(gl_GlobalInvocationID.xy), vec4(normal, 0));
}
